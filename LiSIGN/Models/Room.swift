//
//  Room.swift
//  LiSIGN
//

import Foundation
import SwiftUI
import ModelIO

// public class Room: Identifiable {
class Room: NSObject, NSCoding {
    // Extend Codable to convert JSON-Objecttype and viceversa
    private var _roomId: String = NSUUID().uuidString    // Maybe we don't need an id at all - What is the UUID type???
    private var _title: String
    private var _image: String
    private var _type: String
    private var _roomObject: MDLAsset // MDLAsset is the type that LiDAR gives back for the 3D room scan
    
    public init(title aTitle: String, image aImage: String, type aType: String, roomObject aRoomObject: MDLAsset) {
        self._roomObject = aRoomObject
        self._title = aTitle
        self._image = aImage
        self._type = aType
    }

//    init(roomObject: MDLAsset) {
//        self._roomObject = roomObject
//        self._title = "ScannedRoom"
//        self._type = "Bedroom"
//        self._image = "" // TODO: Replace with some image from Assets
//    }
    
//    required init(from decoder: Decoder) throws {
//        // code here
//    }
    
    public required convenience init?(coder: NSCoder) { // We make it convenience because we want it to call the exiting init constructor once it has been decoded
        guard let aRoomId = coder.decodeObject(forKey: "roomId") as? String,
              let aTitle = coder.decodeObject(forKey: "title") as? String,
              let aImage = coder.decodeObject(forKey: "image") as? String,
              let aType = coder.decodeObject(forKey: "type") as? String,
              let aRoomObject = coder.decodeObject(forKey: "roomObject") as? MDLAsset
        else { return nil }

        self.init(title: aTitle, image: aImage, type: aType, roomObject: aRoomObject)
    }
    
    public var roomId: String { // No setter for the roomId - It is autogenerated in line 12
        get {
            return self._roomId;
        }
    }
    
    public var title: String {
        get {
            return self._title;
        }
        set {
            self._title = newValue
        }
    }
    
    public var image: String {
        get {
            return self._image;
        }
        set {
            self._image = newValue
        }
    }
    
    public var type: String {
        get {
            return self._type;
        }
        set {
            self._type = newValue
        }
    }
    
    public var roomObject: MDLAsset {
        get {
            return self._roomObject;
        }
        set {
            self._roomObject = newValue
        }
    }
    
    func encode(with coder: NSCoder) {
        coder.encode(_roomId, forKey: "roomId")
        coder.encode(_title, forKey: "title")
        coder.encode(_image, forKey: "image")
        coder.encode(_type, forKey: "type")
        coder.encode(_roomObject, forKey: "roomObject")
    }
}

//struct Room: Decodable {
//    var title: String
//    var image: Image
//    var type: String
//    var roomObject: MDLAsset
//}

